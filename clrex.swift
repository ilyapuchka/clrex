#!/usr/bin/env swift

import Cocoa
import AppKit.NSColor


extension NSColor {
    
    func toTemplate() -> String {
        let template = "UIColor(red: %f, green: %f, blue: %f, alpha: %f)"
        return String(format: template, redComponent, greenComponent, blueComponent, alphaComponent)
    }
    
    var rgbColor: NSColor? {
        return colorUsingColorSpaceName(NSDeviceRGBColorSpace)
    }
    
}

extension NSColorList {
    
    var rgbColors: [(String, NSColor)] {
        return allKeys.flatMap({ key in
            self.colorWithKey(key)?.rgbColor.map({ color in
                return (self.colorNameForKey(key), color)
            })
        })
    }
    
    func toTemplate() -> String {
        let template = "  static func %@() -> UIColor {\n    return %@\n  }\n\n"
        return rgbColors
            .map { String(format: template, $0.0, $0.1.toTemplate()) }
            .reduce("", combine: +)
    }
    
    func colorNameForKey(key: String) -> String {
        var colorName = key
        colorName = colorName.stringByReplacingOccurrencesOfString(" ", withString: "")
        colorName = colorName.lowercaseString
        colorName = colorName.stringByReplacingOccurrencesOfString("color", withString: "Color")
        if !colorName.hasSuffix("Color") {
            colorName += "Color"
        }
        return colorName
    }
    
    convenience init?(filePath: String) {
        guard isColorListFile(filePath) else { return nil }

        var listName = (filePath as NSString).lastPathComponent
        listName = (listName as NSString).stringByDeletingPathExtension
        
        self.init(name: listName, fromFile: filePath)
    }

}

func isColorListFile(fileName: String) -> Bool {
    return (fileName as NSString).pathExtension.lowercaseString == "clr"
}

extension Array where Element: NSColorList {
    
    func toTemplate() -> String {
        let template = "enum %@ {\n\n%@}\n"
        return map({ String(format: template, $0.name!, $0.toTemplate()) })
            .reduce("//AUTOGENERATED FILE, DO NOT EDIT\n\nimport UIKit\n\n", combine: +)
    }
    
}

extension NSFileManager {
    
    func fullContentsPathsOfDirectoryAtPath(path: String) throws -> [String] {
        return try contentsOfDirectoryAtPath(path).map({
            (path as NSString).stringByAppendingPathComponent($0)
        })
    }

    func colorListsAtPath(path: String) throws -> [NSColorList] {
        return try fullContentsPathsOfDirectoryAtPath(path).flatMap({ NSColorList(filePath: $0) })
    }

}

guard let libraryDir = NSSearchPathForDirectoriesInDomains(NSSearchPathDirectory.LibraryDirectory, NSSearchPathDomainMask.UserDomainMask, true).first else {
    fatalError("Failed to locate ~/Library")
}

let colorsPath = (libraryDir as NSString).stringByAppendingPathComponent("Colors")
do {
    let fm = NSFileManager.defaultManager()
    let lists = try fm.colorListsAtPath(colorsPath)
    let destinationPath = "Colors.generated.swift"
    let content = lists.toTemplate()
    try content.writeToFile(destinationPath, atomically: true, encoding: NSUTF8StringEncoding)
}
catch {
    fatalError(String(error))
}


